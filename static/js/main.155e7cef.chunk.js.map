{"version":3,"sources":["logo.svg","MainPage.tsx","MainForm.tsx","Success.tsx","Failure.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["MainPage","showForm","className","src","logo","alt","onClick","MainForm","showFailure","showSuccess","useState","undefined","text1","setText1","text2","setText2","text3","setText3","check1","setCheck1","processing","setProcessing","handleSubmit","setTimeout","alert","onSubmit","event","preventDefault","id","v4","value","onChange","e","target","type","checked","Success","Failure","App","setShowForm","setShowSuccess","setShowFailure","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.155e7cef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\n\nexport interface IMainPageProps {\n  showForm: () => void;\n}\n\nexport const MainPage = ({ showForm }: IMainPageProps) => {\n  return (\n    <>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <p>Welcome to the rugged frontend</p>\n      <button onClick={showForm}>Go To Rugged Form</button>\n    </>\n  );\n};\n","import { FormEventHandler, useState } from 'react';\nimport { v4 } from 'uuid';\n\nexport interface IMainFormProps {\n  showSuccess: () => void;\n  showFailure: () => void;\n}\n\nexport const MainForm = ({ showFailure, showSuccess }: IMainFormProps) => {\n  const [text1, setText1] = useState<string | undefined>(undefined);\n  const [text2, setText2] = useState<string | undefined>(undefined);\n  const [text3, setText3] = useState<string | undefined>(undefined);\n  const [check1, setCheck1] = useState<boolean>(false);\n  const [processing, setProcessing] = useState<boolean>(false);\n  const handleSubmit = () => {\n    setProcessing(true);\n    if (text1 === 'text 1 test data' && text2 === 'text 2 success data' && text3 === 'text 3 test data' && check1) {\n      setTimeout(() => {\n        showSuccess();\n        setProcessing(false);\n      }, 2000);\n    } else if (\n      text1 === 'text 1 test data' &&\n      text2 === 'text 2 failure data' &&\n      text3 === 'text 3 test data' &&\n      check1\n    ) {\n      setTimeout(() => {\n        showFailure();\n        setProcessing(false);\n      }, 2000);\n    } else {\n      setTimeout(() => {\n        setProcessing(false);\n        alert('Form Input Not Within what it should be');\n      });\n    }\n  };\n  const handleFormSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n    handleSubmit();\n    event.preventDefault();\n  };\n  return (\n    <>\n      {processing && <p>Processing your input, please wait...</p>}\n      {!processing && (\n        <form onSubmit={handleFormSubmit}>\n          <p>Here is a rugged form!</p>\n          <div>\n            <label id={v4()} data-testid={'text-input-label-1'}>\n              Label Text for Text Input 1\n              <br />\n              <input\n                id={v4()}\n                data-testid={'text-input-input-1'}\n                value={text1}\n                onChange={(e) => setText1(e.target.value)}\n              />\n            </label>\n          </div>\n          <div>\n            <label id={v4()}>\n              Label Text for Text Input 2\n              <br />\n              <input id={v4()} value={text2} onChange={(e) => setText2(e.target.value)} />\n            </label>\n          </div>\n          <div>\n            <label id={v4()} data-testid={'text-input-label-3'}>\n              Label Text for Text Input 3\n              <br />\n              <input\n                id={v4()}\n                data-testid={'text-input-input-3'}\n                value={text3}\n                onChange={(e) => setText3(e.target.value)}\n              />\n            </label>\n          </div>\n          <div>\n            <label id={v4()} data-testid={'checkbox-label'}>\n              Label Text for Checkbox\n              <br />\n              <input\n                id={v4()}\n                data-testid={'checkbox-input'}\n                type=\"checkbox\"\n                checked={check1}\n                onChange={(e) => setCheck1(e.target.checked)}\n              />\n            </label>\n          </div>\n          <div>\n            <label id={v4()}>\n              Label for a submit <br />\n              <button id={v4()} type=\"button\" onClick={handleSubmit}>\n                Submit\n              </button>\n            </label>\n          </div>\n        </form>\n      )}\n    </>\n  );\n};\n","export const Success = () => {\n  return <p>The Form was submitted successfully. Thank you for your input!</p>;\n};\n","export const Failure = () => {\n  return <p>There was a failure in the form, please try again.</p>;\n};\n","import './App.css';\nimport { useState } from 'react';\nimport { MainPage } from './MainPage';\nimport { MainForm } from './MainForm';\nimport { Success } from './Success';\nimport { Failure } from './Failure';\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showFailure, setShowFailure] = useState(false);\n  return (\n    <div className=\"App\">\n      {!showForm && !showSuccess && !showFailure && <MainPage showForm={() => setShowForm(true)} />}\n      {showForm && (\n        <MainForm\n          showSuccess={() => {\n            setShowSuccess(true);\n            setShowForm(false);\n          }}\n          showFailure={() => {\n            setShowFailure(true);\n            setShowForm(false);\n          }}\n        />\n      )}\n      {showSuccess && <Success />}\n      {showFailure && <Failure />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}